---
- name: Preflight - Check inventory
  hosts: localhost
  any_errors_fatal: "{{ default_openio_any_errors_fatal }}"
  max_fail_percentage: 0
  vars_files:
    - ../vars/sds.yml

  tasks:
    - name: Check Ansible version
      assert:
        that:
          - ansible_version.full is version_compare('2.5.0', '>=')
          - ansible_version.full is version_compare('2.10.0', '<')
      check_mode: false

    - name: Check number of zookeeper hosts
      assert:
        that:
          - groups.zookeeper is defined
          - groups.zookeeper | length is divisibleby 3
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
      check_mode: false

    - name: Check number of meta0 hosts
      assert:
        that:
          - groups.meta0 is defined
          - groups.meta0 | length >= 3
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
      check_mode: false

    - name: Test python-netaddr
      debug:
        msg: "{{ '192.168.1.254/24' | ipaddr }}"
      register: _test_netaddr
      ignore_errors: true

    - name: install python-netaddr
      become: true
      package:
        name: python-netaddr
      register: _install_netaddr
      when:
        - _test_netaddr is failed
        - default_openio_manage_os_requirement

    - name: Check Python-netaddr is available
      assert:
        that: _test_netaddr is success or _install_netaddr is success and _install_netaddr is not skipped
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
      check_mode: false

    - name: Test metadata definition
      set_fact:
        _test_metadata: "{{ groups['meta'] \
          | map('extract', hostvars, ['openio_metadata_mounts', 0]) \
          | list }}"
      ignore_errors: true

    - name: Check hosts in 'meta' group have openio_metadata_mounts
      assert:
        that:
          - _test_metadata is iterable
          - _test_metadata is not string
      check_mode: false

- name: Preflight - Check hosts
  hosts: openio
  strategy: linear
  any_errors_fatal: "{{ default_openio_any_errors_fatal }}"
  max_fail_percentage: 0
  vars_files:
    - ../vars/sds.yml
  become: true

  tasks:
    - name: SDS release not match
      assert:
        that: openio_sds_release | d(default_openio_sds_release) in default_openio_release_supported
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
      check_mode: false

    - name: Number of meta0 hosts is not adequate for three copies
      assert:
        that:
          - groups.meta0 is defined
          - groups.meta0 | length >= 3
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
      when: namespace_storage_policy | d(default_namespace_storage_policy) == "THREECOPIES"

    - name: Install python
      raw: "test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)"
      changed_when: false
      check_mode: false

    - name: Check common variables are defined
      fail:
        msg: "{{ item }} value is required"
      when: hostvars[inventory_hostname][item] is not defined
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
      with_items:
        - namespace
        - openio_bind_interface
        - openio_bind_address

    - block:
        - name: Check keepalived variables are defined
          fail:
            msg: "{{ item }} value is required"
          when: hostvars[inventory_hostname][item] is not defined
          ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
          with_items:
            - openio_bind_virtual_address
            - openio_bind_virtual_address_mask
            - openio_vrrp_id
            - openio_keepalived_password
      when:
        - groups.keepalived is defined
        - groups.keepalived

    - block:
        - name: Check galera variables are defined
          fail:
            msg: "{{ item }} value is required"
          when: hostvars[inventory_hostname][item] is not defined
          ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
          with_items:
            - openio_database_root_password
            - openio_database_keystone_password
            - openio_database_sst_password
      when:
        - groups.galera is defined
        - groups.galera

    - block:
        - name: Check keystone variables are defined
          fail:
            msg: "{{ item }} value is required"
          when: hostvars[inventory_hostname][item] is not defined
          ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
          with_items:
            - openio_keystone_admin_password
            - openio_keystone_swift_password
            - openio_keystone_demo_password
      when:
        - groups.keystone is defined
        - groups.keystone

    - name: openio_haproxy_password is undefined
      assert:
        that:
          - openio_haproxy_password is defined
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
      when:
        - groups.haproxy is defined
        - groups.haproxy

    - block:
        - name: Check grafana variables are defined
          fail:
            msg: "{{ item }} value is required"
          when: hostvars[inventory_hostname][item] is not defined
          ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
          with_items:
            - openio_grafana_user
            - openio_grafana_password
            - openio_grafana_secret_key
      when:
        - groups.grafana is defined
        - groups.grafana

    - name: Check mirror reachability {{ openio_mirror | d(default_openio_mirror) }}
      uri:
        url: "http://{{ openio_mirror | d(default_openio_mirror) }}/pub/repo/openio/sds/{{ openio_sds_release | d(default_openio_sds_release) }}/"
      register: request
      changed_when: false
      failed_when: false
      check_mode: false
      environment: "{{ default_openio_environment }}"

    - name: Check OpenIO repository is reachable
      assert:
        that:
          - request.status != -1
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
      check_mode: false

    - name: Check hostnames in openio group are unique
      assert:
        that:
          - groups.openio is defined
          - >
            groups['openio'] | map('extract', hostvars, ['ansible_hostname']) | list | count
            ==
            groups['openio'] | map('extract', hostvars, ['ansible_hostname']) | list | unique | count
      delegate_to: localhost
      run_once: true
      when: default_openio_checks_filter.hostname_unique


    - name: 'Gather /etc/passwd entries'
      getent:
        database: passwd

    - name: Stop if UID is already used for an account which is not 'openio'
      assert:
        that: getent_passwd | check_uid('openio', default_openio_user_openio_uid)
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"

    - name: Stop if GID is already used for an account which is not 'openio'
      assert:
        that: getent_passwd | check_gid('openio', default_openio_group_openio_gid)
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"

    - name: Get running process
      command: "/bin/ps auxww"
      changed_when: false
      register: ps
      check_mode: false

    - name: Get 'open files' limit
      shell: "ulimit -n"
      changed_when: false
      register: _openfiles
      check_mode: false

    - name: Check max open files
      assert:
        that: _openfiles.stdout | int >= default_openio_limits_openfiles_min | int
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"

    - name: Check systemd
      assert:
        that: ansible_service_mgr == "systemd"
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"

    - name: Check Operating System is supported
      assert:
        that: ansible_distribution in default_openio_distribution_supported
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"

    - name: Check SELinux is disabled
      assert:
        that: ansible_selinux.status == 'disabled'
        msg: SELinux must be disabled.
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
      when:
        - ansible_os_family == 'RedHat'

    - name: Check AppArmor is disabled
      assert:
        that: ansible_apparmor.status == 'disabled'
        msg: AppArmor must be disabled.
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
      when:
        - ansible_os_family == 'Debian'

    - name: Stop and disable firewalld.
      service:
        name: firewalld
        state: stopped
        enabled: false
      register: _firewalld_disable
      when:
        - default_openio_manage_os_requirement
        - "'firewalld' in ps.stdout"
        - ansible_os_family == 'RedHat'

    - name: Check firewalld is disabled
      assert:
        that: "'firewalld' not in ps.stdout or _firewalld_disable | default(false) is success"
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"

    - name: Check memory for zookeeper
      assert:
        that: ansible_memtotal_mb >= 1830
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"
      when:
        - inventory_hostname in groups['zookeeper']
        - default_openio_checks_filter.zookeeper_memory

    - name: Check kernel version
      assert:
        that: ansible_kernel.split('-')[0] is version_compare('3.10', '>=')
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"

    - name: Check http_proxy environment variable
      assert:
        that:
          - ansible_env.http_proxy is not defined or openio_environment.http_proxy is defined
          - ansible_env.https_proxy is not defined or openio_environment.https_proxy is defined
      ignore_errors: "{{ openio_ignore_assert_errors | d(default_openio_ignore_assert_errors) }}"

    - name: Fill /etc/yum/vars/contentdir
      copy:
        dest: /etc/yum/vars/contentdir
        content: "{{ ansible_distribution | lower }}"
      when:
        - ansible_os_family == 'RedHat'

    - block:
        - name: Check mountpoints are not on the root volume
          shell: "df {{ inventory_mounts.mountpoint }} | grep -E '{{ inventory_mounts.mountpoint }}$' | tr -s ' ' ' ' | cut -d' ' -f1,6"
          register: _df_mounts
          with_items: "{{ ( openio_data_mounts | d([]) + openio_metadata_mounts | d([]) ) | sort(attribute='mountpoint') | unique }}"
          loop_control:
            loop_var: inventory_mounts
          failed_when: _df_mounts.stdout_lines == []
          check_mode: false
          changed_when: false

        - name: Check mountpoints match block devices in host_vars
          assert:
            that:
              - df_partition == inventory_partition
            msg: "Mounted partitions do not match those declared in the inventory."
          with_items: "{{ _df_mounts.results }}"
          loop_control:
            loop_var: df_result
          vars:
            df_partition: "{{ df_result.stdout.split()[0] }}"
            df_mountpoint: "{{ df_result.stdout.split()[1] }}"
            parts: "{{ openio_data_mounts | d([]) + openio_metadata_mounts | d([]) | sort | unique }}"
            inventory_partition: "{{ parts | selectattr('mountpoint', 'equalto', df_mountpoint) | map(attribute='partition') | list | first | d('') }}"

      when: default_openio_checks_filter.mountpoint
...
